 Необходимо разработать программу для сортировки составных данных, удовлетворяющую следующим минимальным требованиям.
 1. Программа должна работать в трех режимах: генерация тестовых данных, сортировка данных, печать данных на экран.
 2. Режим работы программы выбирается пользователем с помощью аргументов командной строки.
 3. Программа, запущенная с флагом --generate N или -g N, генерирует
 случайные данные в соответствии со схемой данных (см. вариант) в количестве N строк.
 Если указан флаг--out="output.csv" или-o output.csv, вывод осуществляется в соответствующий файл а формате значений, разделенных запятой (CSV). Иначе вывод осуществляется на стандартный поток вывода в соответствующем формате.
 4. Программа, запущенная со флагом--sort или-s, считывает данные в соответствии со схемой данных в структуру-контейнер (см. вариант), сортирует их и выводит отсортированные.
 Если указан флаг--out="output.csv" или-o output.csv, вывод осуществляется в соответствующий файл а формате значений, разделенных запятой (CSV). Иначе вывод осуществляется на стандартный поток вывода в соответствующем формате.
 Если указан флаг--in="data.csv"или-i data.csv, ввод осуществляется из соответствующего файла. Иначе ввод осуществляется со стандартного потока ввода в соответствующем формате.
 По-умолчанию сортировка осуществляется по возрастанию. Также по возрастанию следует сортировать, если указан флаг--type=asc или-t A. Если указан флаг--type=desc или-t D, сортировка выполняется в порядке убывания.
 5. Программа, запущенная с флагом–print или-P, считывает данные и выводит их в формате таблицы с фиксированной шириной. Если указан флаг--in="data.csv" или -i data.csv, ввод осуществляется из соответствующего файла. Иначе со стандартного потока ввода считывается имя файла, содержащее данные для считывания.
 Если указан флаг--out="output.txt" или-o output.txt, вывод осуществляется в соответствующий файл. Иначе вывод осуществляется на стандартный поток вывода.
 Логические значения при выводе заменить на YES/NO. Вещественные
 значения выводить с точностью до двух знаков после десятичного раз
делителя.
 Минимальные требования, предъявляемые к исходному коду:
 1. Проект должен состоять из нескольких логически разделенных фай
лов:
 • структура-запись, созданная по схеме данных, соответствующая
 одной строке;
 • структура-контейнер и реализация методов для работы с ней;
 • обработка аргументов командной строки;
 • алгоритм сортировки;
 • точки входа (main) и функций для работы с вводом-выводом.
 2. Структура-контейнер должна поддерживать следующие методы:
 • инициализация;
 • получение текущего размера (количества хранимых элементов);
 • получение произвольного элемента по индексу;
 • получение указателей на начало и конец;
 • получение следующего и предыдущего элемента от указателя;
 • добавление элемента в начало, конец и произвольное место;
 • удаление элемента из начала, конца и произвольного места;
 • замена пары элементов друг на друга;
 • преобразование массива в структуру-контейнер и обратно;
 • очистка.
 3. Алгоритм сортировки «не должен ничего знать» о деталях реализации структуры-контейнера: все взаимодействие с ней должно осуществляться через описанные выше функции.
 4. Алгоритм сортировки также недолжен явно использовать поля структуры записи: сравнение записей должно осуществляться через компаратор
функцию, передаваемую в подпрограмму сортировки по указателю.
 5. Для сборки проекта необходимо использовать любой из рекомендованных подходов к автоматизации: Make, CMake, bash/batch-скрипт,
 setup.py-скрипт.

 ВАРИАНТ СОРТИРОВКИ: ГНОМЬЯ

 ВАРИАНТ КОНТЕЙНЕРА: СТЕК
 
 СХЕМА ДАННЫХ (СТРУКТУРА ЗАПИСЬ):
 Научная публикация
 Название публикации: строка
 Фамилия первого автора: строка
 Инициалы первого автора: строка
 Название журнала: строка
 Год публикации:  четырехзначное число
 Том журнала: целое число
 Входит в РИНЦ: логическое значение
 Количество страниц: целое число
 Цитирований: целое число